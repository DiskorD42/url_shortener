 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var MongoClient = require('mongodb').MongoClient;
var validUrl = require('valid-url');
var failureCounter = 0;
var rnd = null;
var userInfo = null;
var maxNumber = 9999;
var minNumber = 1000;

function generateAndCheckForDuplicate(collection, req, res){

  rnd = Math.floor(Math.random() * (maxNumber - minNumber + 1)) + minNumber;
  
      
  collection.findOne({"nr":rnd}, function(err, result){
            console.log(failureCounter);
            if (result ){
              console.log("omg");
               generateAndCheckForDuplicate(collection);
               failureCounter = failureCounter + 1;
               if(failureCounter = maxNumber+1){
                 userInfo = { "err0r":"all available shenanigans have been used" };
                 res.send(JSON.stringify(userInfo));
                 res.end();
               }
            }else{
             failureCounter = 0; 
             collection.insert({"url":req.params.givenURL,
                             "nr":rnd}); 
             userInfo = { "original_url":req.params.givenURL, "short_url":"https://alike-iris.glitch.me/"+rnd };
             res.send(JSON.stringify(userInfo));
             res.end();
              
          }
  });

}


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.route('/new/:givenURL(*)')
    .get(function(req, res) {
         //test if the url is correct?
        if (validUrl.isUri(req.params.givenURL)){
        
        //store the url in mongo with the corresponding short link number
        MongoClient.connect("mongodb://disky:mongofun@ds117209.mlab.com:17209/url_lookup", function(err, db){
          if(err){ return console.dir(err); }
          var collection = db.collection('urlsButShort');      
          generateAndCheckForDuplicate(collection, req, res);            
      })
           
      }else{
      userInfo = { "something_went_terribly_wrong":req.params.givenURL, "notValidURL":"orWhat?" };
      res.send(JSON.stringify(userInfo));
      res.end();
      }
          
      
		   
    })

app.route('/:shortNumber')
    .get(function(req, res) {
         //look up if the number exists in mongo
        // redirect to the stored value in mongo
  MongoClient.connect("mongodb://disky:mongofun@ds117209.mlab.com:17209/url_lookup", function(err, db){
          if(err){ return console.dir(err); }
          var collection = db.collection('urlsButShort');      
          console.log();
          var shortNr = parseInt(req.params.shortNumber);
          collection.findOne({"nr":shortNr}, function(err, result){
            
            if (result ){
              console.log(result.url);
              res.redirect(result.url);
               
               
            }else{
              console.log("no result");
             
              
          }
        });         
    })
                  
		   
    })


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})


app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

